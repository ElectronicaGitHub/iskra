{
  "name": "useragent",
  "version": "1.1.0",
  "description": "User-Agent string parser based on Browserscope.org algorithms for more browser reporting",
  "author": {
    "name": "Arnout Kazemier"
  },
  "main": "./index.js",
  "keywords": [
    "user-agent",
    "useragent",
    "browserscope",
    "ua",
    "parser",
    "agent",
    "user agent"
  ],
  "maintainers": [
    {
      "name": "Arnout Kazemier",
      "email": "info@3rd-Eden.com",
      "url": "http://www.3rd-Eden.com"
    }
  ],
  "licenses": [
    {
      "type": "Apache-2.0",
      "url": "https://github.com/3rd-Eden/useragent/blob/master/LICENSE"
    },
    {
      "type": "MIT",
      "url": "https://github.com/3rd-Eden/useragent/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/3rd-Eden/useragent.git"
  },
  "dependencies": {
    "yamlparser": "0.0.2",
    "request": "2.9.202",
    "semver": "1.0.14"
  },
  "devDependencies": {
    "should": "*",
    "mocha": "*",
    "long-stack-traces": "0.1.2"
  },
  "scripts": {
    "update": "node ./bin/update.js",
    "test": "make test"
  },
  "readme": "# useragent \n\nCurrent build status:[![BuildStatus](https://secure.travis-ci.org/3rd-Eden/useragent.png)](http://travis-ci.org/3rd-Eden/useragent)\n\nUseragent is a port of browserscope.org's user agent parser project which\nallows you to parse user agent strings with high accuracy by using hand tuned\ndedicated regular expressions for browser matching. Regular user agent parser\nhave major issues because they usually parse out the version number of the\nrender engine instead of the version number of the browser.\n\nBecause user agent parsing will always be like shooting a moving target because\nbrowser vendors keep making subtle changes to them it's important to keep your\nthe regular expressions database up to date. When you install useragent it will\nautomatically download the latest regexp database from the ua-parser project\nand transform it in to a dedicated node.js require statement. This way you will\nalways be up to date.\n\nBut there few more tricks, so keep reading on until you hit the API section.\n\n### Performance\n\nThe 1.0 release of the useragent parser spots a major performance improvement\nof the old parser, it also has a reduced memory level because we recompiled the\nregex list to make a smaller impact.\n\nSome stats from the benchmark:\n\n> ```\n> Starting the benchmark, parsing 47 useragent strings per run\n> Executed benchmark (useragent2)\n> Count (86), Cycles (96), Elapsed (5.028), Hz (1640.9779913574882)\n>\n> Executed benchmark (useragent1)\n> Count (56), Cycles (96), Elapsed (5.03), Hz (1063.7910527195145)\n> ```\n\nAs you can see that useragent 2 (1.0) is much faster then original parser. The\ntest above was executed on a iMac 2010 and Node.js v0.4.12. The code has been\noptimized to take full advantage of the upcoming V8 crankshaft support in\nnode.js and you will another performance boost from it. Free performance boost,\nso that is pretty bad ass.\n\n### Installation\n\nInstallation is done using the Node Package Manager (npm). If you don't have\nnpm installed on your system you can download it from\n[npmjs.org](http://npmjs.org)\n\n```\nnpm install useragent\n```\n\n### Migrating from 0.1.2 to 1.0.0\n\nIf you are upgrading from 0.1.2 to 1.0.0 these changes will affect your:\n\n* `useragent.browser(ua)` has been renamed to `useragent.is(ua)`.\n* `useragent.parser(ua, jsua)` has been renamed to `useragent.parse(ua, jsua)`.\n* `result.pretty()` has been renamed to `result.toAgent()`.\n* `result.V1` has been renamed to `result.major`.\n* `result.V2` has been renamed to `result.minor`.\n* `result.V3` has been renamed to `result.patch`.\n* `result.prettyOS()` has been removed.\n* `result.match` has been removed.\n\nFor more detailed information, check out the API below.\n\n### API / Working the codez\n\nInclude the useragent parser in you node.js application:\n\n```js\nvar useragent = require('useragent');\n```\n\nThe useragent library allows you do use the automatically installed regex\nlibrary or you can fetch it live from the remote servers. So if you are\nparanoid and always want your regex library to be up to date to match with\nagent the widest range of useragent strings you can do:\n\n```js\nvar useragent = require('useragent');\nuseragent(true);\n```\n\nThis will async load the database from the server and compile it to a proper\nJavaScript supported format. If it fails to compile or load it from the remote\nlocation it will just fallback silently to the shipped version.\n\nBut there are more ways to update your regex library, when the useragent is\ninstalled on your system we automatically start a update process to see if the\nshipped version is out of date or not, if we can fetch one we will store that\none instead so you have latest version available for you when you install.\n\nIn addition to this, doing a `npm update useragent` should also re-fetch the\nlibrary for you. So many ways to stay up to date ;).\n\n#### useragent.is(useragent string).browsername;\n\nThis api provides you with a quick and dirty browser lookup. The underlying\ncode is usually found on client side scripts so it's not the same quality as\nour parse method but it does the job.\n\n`useragent.is` returns a object with potential matched browser names\n\n```js\nuseragent.is(req.headers['user-agent']).firefox // true\nuseragent.is(req.headers['user-agent']).safari // false\nvar ua = useragent.is(req.headers['user-agent'])\n\n// the object\n{\n  version: '3'\n  webkit: false\n  opera: false\n  ie: false\n  chrome: false\n  safari: false\n  mobile_safari: false\n  firefox: true\n}\n```\n\n#### useragent.parse(useragent string[, js useragent]);\n\nThis is the actual user agent parser, this is where all the magic is happening.\nThe function accepts 2 arguments, both should be a `string`. The first argument\nshould the useragent string that is known on the server from the\n`req.headers.useragent` header. The other argument is optional and should be\nthe useragent string that you see in the browser, this can be send from the\nbrowser using a xhr request or something like this. This allows you detect if\nthe user is browsing the web using the `Chrome Frame` plugin.\n\nThe parser returns a Agent instance, this allows you to output user agent\ninformation in different predefined formats. See the Agent section for more\ninformation.\n\n```js\nvar agent = useragent.parse(req.headers['user-agent']);\n\n// example for parsing both the useragent header and a optional js useragent\nvar agent2 = useragent.parse(req.headers['user-agent'], req.query.jsuseragent);\n```\n\n#### useragent.lookup(useragent string[, js useragent]);\n\nThis provides the same functionality as above, but it caches the useragent\nstring and it's parsed result in memory to provide faster lookups in the\nfuture. This can be handly if you expect to parse a lot of user agent strings.\n\nIt uses the same arguments as the `useragent.parse` method and returns exactly\nthe same result, but it's just cached.\n\n#### useragent.fromString(agent.toString());\n\nParses the result of `agent.toString()` back to a new Agent instance.\n\n```js\nvar agent = useragent.parse(req.headers['user-agent'])\n  , another = useragent.fromString(agent.toString());\n\nconsole.log(agent == another);\n```\n\n#### useragent.fromJSON(agent.toJSON());\n\nParses the result of `agent.toJSON()` back to a new Agent instance.\n\n```js\nvar agent = useragent.parse(req.headers['user-agent'])\n  , another = useragent.fromJSON(agent.toJSON());\n\nconsole.log(agent == another);\n```\n\n### Agents\n\nMost of the methods mentioned above return a Agent instance. This Agent exposes\nthe parsed out information from the user agent strings. This allows us to\nextend the agent with more methods that do not nessesarly need to be in the\ncore agent instance, allowing us to expose a plugin interface for third party\ndevelopers.\n\nYou can read out the following properties:\n\n* `family` The browser family, or browser name, it defaults to Other.\n* `major` The major version number of the family, it defaults to 0.\n* `minor` The minor version number of the family, it defaults to 0.\n* `patch` The patch version number of the family, it defaults to 0.\n* `os` The operating system of the user, it defaults to Other.\n\nWhile most version number information is a string, I have chosen to present\nthem all as string because a browser can also be identified as beta or alpha.\nWhen the family name or os can not be determined we will default to the string\nOther.\n\nThe following methods are available:\n\n#### Agent.toAgent();\n\nReturns the family and version number concatinated in a nice human readable\nstring.\n\n```js\nvar agent = useragent.parse(req.headers['user-agent']);\nagent.toAgent(); // 'Chrome 15.0.874'\n```\n\n#### Agent.toString();\n\nReturns the results of the `Agent.toAgent()` but also adds the parsed operating\nsystem to the string in a human readable format.\n\n```js\nvar agent = useragent.parse(req.headers['user-agent']);\nagent.toString(); // 'Chrome 15.0.874 / Mac OS X'\n\n// as it's a to string method you can also concat it with another string\n\n'your useragent is ' + agent; // 'your useragent is Chrome 15.0.874 / Mac OS X'\n```\n\n#### Agent.toVersion();\n\nReturns the version of the browser in a human readable string.\n\n```js\nvar agent = useragent.parse(req.headers['user-agent']);\nagent.toVersion(); // '15.0.874'\n```\n\n#### Agent.toJSON();\n\nGenerates a stringified JSON output of the agent, this can later be used again\nto create a new Agent instance using the `useragent.fromJSON` method.\n\n```js\nvar agent = useragent.parse(req.headers['user-agent']);\nagent.toJSON(); //'{\"family\":\"Chrome\",\"major\":\"15\",\"minor\":\"0\",\"patch\":\"874\",\"os\":\"Mac OS X\"}'\n```\n\n### Adding more features to the Agent\n\nAs I wanted to keep the core of the useragent parser as clean and fast as\npossible I decided to move some of the initally planned features to a new\n`plugin` file.\n\nThese extenstions to the Agent prototype can be loaded by requiring the\n`useragent/features` file:\n\n```js\nvar useragent = require('useragent');\nrequire('useragent/features');\n```\n\nThe inital release introduces 1 new method, satisfies, which allows you to see\nif the version number of the browser satisfies a certain range. It uses the\nsemver library to do all the range calculations but here is a small summary of\nthe supported range styles:\n\n* `>1.2.3` Greater than a specific version.\n* `<1.2.3` Less than.\n* `1.2.3 - 2.3.4` := `>=1.2.3 <=2.3.4`.\n* `~1.2.3` := `>=1.2.3 <1.3.0`.\n* `~1.2` := `>=1.2.0 <2.0.0`.\n* `~1` := `>=1.0.0 <2.0.0`.\n* `1.2.x` := `>=1.2.0 <1.3.0`.\n* `1.x` := `>=1.0.0 <2.0.0`.\n\n#### Agent.satisfies('range style here');\n\nCheck if the agent matches the supplied range.\n\n```js\nvar agent = useragent.parse(req.headers['user-agent']);\nagent.satisfies('15.x || >=19.5.0 || 25.0.0 - 17.2.3'); // true\nagent.satisfies('>16.12.0'); // false\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/3rd-Eden/useragent/issues"
  },
  "homepage": "https://github.com/3rd-Eden/useragent",
  "_id": "useragent@1.1.0",
  "_shasum": "035fa6df189ab60567ac6303c159e9af0c3abbbe",
  "_from": "useragent@1.1.0",
  "_resolved": "https://registry.npmjs.org/useragent/-/useragent-1.1.0.tgz"
}
